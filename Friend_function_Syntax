#include <iostream>
#include <iomanip>

using namespace std;
class interestCalculation{
int interest, rate, time;
float principal;
 
     public:  
       friend class whole;
      

  void display(){
    cout<<principal;

  }
  }g;


 int interestCalculation :: whole ( int p, float R, int t)
{
     principal = p;
     
     rate = R;
     time = t;

    for (int k =0; k<t; ){

        principal *= R;
        }   }

    
 int interestCalculation:: whole (int p ,  int r, int t){
     principal = p;
     
     rate = (float)r/100;
     time = t;

    for (int k =0; k<t; ){

        principal *= (float)rate;


    }}

  

    int main(){

        cout<<" You want to put rate of interest in fraction < Type Y for 'yes' and N for 'NO'";
        char y,h; cin>>h; 
        if ( y==h){

cout<<"Give the Principal , tenure and rate onr by one please ";
int x,y,z;  cin>>x>>y>>z;
cin>>g.whole(x,z,y);
cout<<" At a initial principle of "<<x<<" on a given time period of "<<y<<" At a rate of "<<z<<" Will give retrn of R.S - "<<g.display();}
else{
    
    cout<<"Give the Principal , tenure and rate onr by one please ";
int x,z; float y;  cin>>x>>y>>z;
cin>>g.whole(x,z,y);
cout<<" At a initial principle of "<<x<<" on a given time period of "<<y<<" At a rate of "<<z<<" Will give retrn of R.S - "<<g.display;}

return 0;}
